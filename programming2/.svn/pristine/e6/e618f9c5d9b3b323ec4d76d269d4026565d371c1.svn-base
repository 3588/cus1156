package programming2;

import java.util.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;

/**
 * This is the "God" class for the program, handles most of the heavy lifting for the project.
 * Handles both the original serialization and the re-serialization done after users exit the
 * system.  Also is the main link between the users and the three classes of information, with
 * this class mainly searching for relevant Courses, Professors, and Students via their ID's,
 * which enables it to add, drop, search for, and provide courses at will to the user.
 * @author Patrick Steel
 *
 */
public class University implements Serializable{
	private ArrayList<Student> students = null;
	private ArrayList<Course> courses = null;
	private ArrayList<Professor> professors = null;
	private static final String CUR_YEAR = "2013";
	private static final String CUR_SEM = "fall";
	private Scanner fileIn = null;
	
	/**
	 * The method which accepts all the data held within three files, and adds their information
	 * to three empty arrayLists. Uses the StringTokenizer to do so. Also calls on a method to
	 * assign courses that professors teach to individual professor's own arrayLists, and potentially
	 * calls a similar method if students have taken previous courses as well.
	 * @param stu
	 * @param cour
	 * @param prof
	 * @throws FileNotFoundException
	 */
	public void initialDataLoad(File stu, File cour, File prof) throws FileNotFoundException{
		courses = new ArrayList<Course>();
		fileIn = new Scanner(cour);
		while(fileIn.hasNextLine()){
			String line = fileIn.nextLine();
			StringTokenizer tokenizer = new StringTokenizer(line,",");
			Course course = new Course(tokenizer.nextToken(),tokenizer.nextToken(),
				tokenizer.nextToken(),tokenizer.nextToken(),tokenizer.nextToken(),tokenizer.nextToken());
			courses.add(course);
		}
		
		professors = new ArrayList<Professor>();
		fileIn = new Scanner(prof);
		while(fileIn.hasNextLine()){
			String line = fileIn.nextLine();
			StringTokenizer tokenizer = new StringTokenizer(line, ",");
			Professor professor = new Professor(tokenizer.nextToken(),tokenizer.nextToken(),
													tokenizer.nextToken(),tokenizer.nextToken());
			professors.add(professor);
		}
		//The call to check and see if a professor teaches or has taught any courses.
		assignProfCourses();
		
		students = new ArrayList<Student>();
		fileIn = new Scanner(stu);
		while(fileIn.hasNextLine()){
			String line = fileIn.nextLine();
			StringTokenizer tokenizer = new StringTokenizer(line, ",");
			Student student = new Student(tokenizer.nextToken(),tokenizer.nextToken(),
											tokenizer.nextToken(),tokenizer.nextToken());
			//Executes only if there are courseIDs held after the student's major in the file.
			if(tokenizer.hasMoreTokens()){
				while(tokenizer.hasMoreTokens()){
					student.addCourseID(tokenizer.nextToken());
				}			
				assignStudentCourse(student);
			}
			students.add(student);
		}
	}
	
	/**
	 * Checks both the arrayList of professors and courses to see if any of their objects have
	 * matching profIDs.  If they do, adds the course to a list of all the courses the professor
	 * has taught.
	 */
	private void assignProfCourses(){
		for(Professor prof : professors){
			String profIDprof = prof.getProfID();
			for(Course cour : courses){
				String profIDcour = cour.getProfID();
				if(profIDcour.equals(profIDprof)){
					prof.addCourseAllCourses(cour);
					//Makes one final check to see if the course is for the current semester.
					//If it is, also adds the course to an arrayList of current courses for
					//the professor.
					if(checkCurSemester(cour)==true){
						prof.addCourseCurCourses(cour);
					}
				}
			}
		}
	}
	
	/**
	 * Similar to the assignProfCourse method above, only for students and matching courses.
	 * Also obtains and adds a String of studentInfo from the student to an arrayList in the
	 * course, which represents the course's class roster.
	 * @param student
	 */
	private void assignStudentCourse(Student student){
		ArrayList<String> courseIDs = student.getCourseIDs();
		for(String IDs : courseIDs){
			for(Course cour : courses){
				String courseID = cour.getCourseID();
				if(IDs.equals(courseID)){
					student.addCourseAllCourses(cour);
					cour.addStudent(student.getStudentInfo());
					//Again, checks if the semester is current, and if so, adds it to an
					//arraylist of current semester courses for the Student.
					if(checkCurSemester(cour)==true){
						student.addCourseCurCourses(cour);
					}
				}
			}
			
		}
	}
	
	/**
	 * Loads the data from .dat files originally written for serialization, re-creating the
	 * three main arrayLists with all of their object information intact.
	 * @throws FileNotFoundException
	 * @throws IOException
	 * @throws ClassNotFoundException
	 */
	public void regularDataLoad() throws FileNotFoundException, IOException, ClassNotFoundException{
		ObjectInputStream in = new ObjectInputStream(new FileInputStream("courses.dat"));
		courses = (ArrayList<Course>) in.readObject();
		in.close();
		
		in = new ObjectInputStream(new FileInputStream("professors.dat"));
		professors = (ArrayList<Professor>) in.readObject();
		in.close();
		
		in = new ObjectInputStream(new FileInputStream("students.dat"));
		students = (ArrayList<Student>) in.readObject();
		in.close();
	}
	
	/**
	 * Serializes the data held within the three main arrayLists into .dat files
	 * @throws FileNotFoundException
	 * @throws IOException
	 */
	public void serializeData() throws FileNotFoundException, IOException{
		ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("courses.dat"));
		out.writeObject(courses);
		out.close();
		
		out = new ObjectOutputStream(new FileOutputStream("professors.dat"));
		out.writeObject(professors);
		out.close();
		
		out = new ObjectOutputStream(new FileOutputStream("students.dat"));
		out.writeObject(students);
		out.close();
	}
	
	/**
	 * Will register a requested course for a particular student if the course is found,
	 * and there is sufficient space in the course to register the student. Will also add
	 * the student's info to the course's class roster.
	 * @param studentID
	 * @param courseID
	 */
	public void registerForCourse(String studentID, String courseID){
		for(Course cour : courses){
			if(courseID.equals(cour.getCourseID())){
				if(cour.getEmptySpots()>0){
					for(Student stu : students){
						if(studentID.equals(stu.getStudentID())){
							stu.registerCourse(cour);
							cour.addStudent(stu.getStudentInfo());
						}
					}
				}
			}
		}
	}
	
	/**
	 * Will drop the requested course from a student's list of courses, so long as the
	 * course is found, is from the current semester, and the student actually takes the course.
	 * If successful, will also remove the student's information from the course's class roster.
	 * @param studentID
	 * @param courseID
	 */
	public void dropCourseCurSemester(String studentID, String courseID){
		for(Course cour : courses){
			if(courseID.equals(cour.getCourseID())){
				if(checkCurSemester(cour)==true){
					for(Student stu : students){
						if(studentID.equals(stu.getStudentID())){
							stu.dropCourse(cour.getCourseID());
							cour.dropStudent(stu.getStudentInfo());
						}
					}
				}
			}
		}
	}
	
	/**
	 * A simple boolean check which will return whether the course in question is in the
	 * current semester or not.  Uses constants held above as the check for what is current.
	 * @param course
	 * @return
	 */
	private boolean checkCurSemester(Course course){
		String curSem = course.getSemSeason();
		String curYear = course.getSemYear();
		if((CUR_SEM.equals(curSem)) && (CUR_YEAR.equals(curYear))){
			return true;
		}
		else
			return false;
	}
	
	/**
	 * Checks if a student user is an actual student based on their ID.  If they are,
	 * returns a boolean value of true, otherwise false.
	 * @param ID
	 * @return
	 */
	public boolean checkStudentID(String ID){
		boolean idChecksOut = false;
		for(Student stu : students){
			if(ID.equals(stu.getStudentID())){
				idChecksOut = true;
			}
		}
		if(idChecksOut==true)
			return true;
		else
			return false;
	}
	
	/**
	 * Similar as the student ID check, only for Professor's in the facultyInterface.
	 * @param ID
	 * @return
	 */
	public boolean checkProfID(String ID){
		boolean idChecksOut = false;
		for(Professor prof : professors){
			if(ID.equals(prof.getProfID())){
				idChecksOut = true;
			}
		}
		if(idChecksOut==true)
			return true;
		else
			return false;
	}
	
	/**
	 * Get's an arrayList of Strings to return to the student user of all
	 * courses they are taking.  Calls on a method to sort the courses before
	 * doing so.
	 * @param ID
	 * @return
	 */
	public ArrayList<String> getStudentAllCourses(String ID){
		ArrayList<String> info = null;
		for(Student stu : students){
			if(ID.equals(stu.getStudentID())){
				stu.sortAllCourses();
				info = stu.getAllCourses();
			}
		}
		return info;
	}
	
	/**
	 * Same as the previous method, only just current courses this time instead.
	 * @param ID
	 * @return
	 */
	public ArrayList<String> getStudentCurCourses(String ID){
		ArrayList<String> info = null;
		for(Student stu : students){
			if(ID.equals(stu.getStudentID())){
				stu.sortCurCourses();
				info = stu.getCurCourses();
			}
		}
		return info;
	}
	
	/**
	 * Similar to the getStudentAllCourses, only for all of a Professor's courses
	 * instead.
	 * @param ID
	 * @return
	 */
	public ArrayList<String> getProfAllCourses(String ID){
		ArrayList<String> info = null;
		for(Professor prof : professors){
			if(ID.equals(prof.getProfID())){
				prof.sortAllCourses();
				info = prof.getAllCourses();
			}
		}
		return info;
	}
	
	/**
	 * Similar to the previous method, except only the Professor's currently
	 * taught courses instead.
	 * @param ID
	 * @return
	 */
	public ArrayList<String> getProfCurCourses(String ID){
		ArrayList<String> info = null;
		for(Professor prof : professors){
			if(ID.equals(prof.getProfID())){
				prof.sortCurCourses();
				info = prof.getCurCourses();
			}
		}
		return info;
	}
	
	/**
	 * Obtains a course's class roster, provided the profID and courseID match up, to return
	 * to the user.
	 * @param proID
	 * @param courseID
	 * @return
	 */
	public ArrayList<String> getCourseRoster(String proID, String courseID){
		ArrayList<String> roster = null;
		for(Course cour : courses){
			if((proID.equals(cour.getProfID())) && (courseID.equals(cour.getCourseID()))){
				roster = cour.getCourseRoster();
			}
		}
		return roster;
	}
}
